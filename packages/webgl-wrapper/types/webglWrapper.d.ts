import { WebGLWrapperOptions, MakeMeshOptions, MakeTextureOptions, Make2DTextureOptions, Make3DTextureOptions, MakeSamplerOptions, DefaultFramebuffer, MakeCubemapOptions, Cubemap, MakeRenderbufferOptions, MakeFramebufferOptions } from "./types";
import Shader from "./shader";
import Program from "./program";
import Mesh from "./mesh";
import Texture from "./texture";
import Sampler from "./sampler";
import { Renderbuffer, Framebuffer } from "./framebuffer";
export default class WebGLWrapper {
    private canvasSelector;
    private _onInit;
    private _onRender;
    private _canvas;
    private _glContext;
    private resolution;
    private _lastFrame;
    private resizeCanvasToFitWindow;
    private _enableExtensions;
    private _defaultFramebuffer;
    constructor(canvasSelector: string, options?: WebGLWrapperOptions);
    get canvas(): HTMLCanvasElement;
    get glContext(): WebGL2RenderingContext;
    get defaultFramebuffer(): DefaultFramebuffer;
    private resizeCanvas;
    start(): void;
    private onAnimationFrame;
    makeShader(shaderType: GLenum): Shader;
    makeVertexShader(shaderSource: string): Shader;
    makeFragmentShader(shaderSource: string): Shader;
    makeProgram(): Program;
    makeProgramFromShaders(vs: Shader, fs: Shader, validate?: boolean): Program;
    makeMesh(options?: MakeMeshOptions): Mesh;
    makeTexture(options: MakeTextureOptions): Texture;
    make2DTexture(options: Make2DTextureOptions): Texture;
    make3DTexture(options: Make3DTextureOptions): Texture;
    makeSampler(options: MakeSamplerOptions): Sampler;
    makeCubemap(options: MakeCubemapOptions): Cubemap;
    makeRenderbuffer(options: MakeRenderbufferOptions): Renderbuffer;
    makeFramebuffer(options: MakeFramebufferOptions): Framebuffer;
}
