import { UniformInfoMapType, UniformSetterMapType, VertexAttributeLocationMapType, VertexAttributeMapType } from "../types";
import { Shader } from "./Shader";
export declare class Program {
    gl: WebGL2RenderingContext;
    private _handle;
    private _vertexShader;
    private _fragmentShader;
    private _handleGenerated;
    private _isLinked;
    private _hasLinkError;
    private _isValidated;
    private _hasValidationError;
    private _isDeleted;
    private _inputAttributes;
    private _attributeLocations;
    private _uniforms;
    private _uniformSetters;
    private _isVertexShaderAttached;
    private _isFragmentShaderAttached;
    constructor(gl: WebGL2RenderingContext, vertexShader?: Shader | null, fragmentShader?: Shader | null);
    get handle(): WebGLProgram;
    get vertexShader(): Shader;
    get fragmentShader(): Shader;
    get handleGenerated(): boolean;
    get isLinked(): boolean;
    get hasLinkError(): boolean;
    get isValidated(): boolean;
    get hasValidationError(): boolean;
    get isDeleted(): boolean;
    get inputAttributes(): VertexAttributeMapType;
    get attributeLocations(): VertexAttributeLocationMapType;
    get uniforms(): UniformInfoMapType;
    get uniformSetters(): UniformSetterMapType;
    private tryAttachShaders;
    private populateAttributes;
    private createUniformSetter;
    private populateUniforms;
    private populate;
    generateHandle(): void;
    attachShader(shader?: Shader | null): void;
    link(): void;
    validate(): void;
    delete(): void;
    getInfoLog(): string;
    setUniform(name: string, value: any): void;
    use(): void;
    unuse(): void;
}
