import { PixelFormat } from "./PixelFormat";
import { SamplingProperties } from "./SamplingProperties";
export declare class Texture {
    gl: WebGL2RenderingContext;
    private _target;
    private _pixelFormat;
    private _samplingProperties;
    private static DEFAULT_PIXEL_FORMAT;
    private static DEFAULT_SAMPLING_PROPERTIES;
    private static VALID_TARGETS;
    private static TWO_DIMENSIONAL_TARGETS;
    private static THREE_DIMENSIONAL_TARGETS;
    private _handle;
    private _width;
    private _height;
    private _depth;
    private _handleGenerated;
    private _isDeleted;
    private _isStorageInitialized;
    private validateTarget;
    constructor(gl: WebGL2RenderingContext, size: [number, number, number?], _target: GLenum, _pixelFormat?: PixelFormat, _samplingProperties?: SamplingProperties);
    get handle(): WebGLTexture;
    get width(): number;
    get height(): number;
    get depth(): number;
    get pixelFormat(): PixelFormat;
    get samplingProperties(): SamplingProperties;
    get target(): GLenum;
    get handleGenerated(): boolean;
    get isDeleted(): boolean;
    get isStorageInitialized(): boolean;
    private is2DTexture;
    private is3DTexture;
    generateHandle(): void;
    private setSampling;
    createStorage(): void;
    delete(): void;
    bind(unit: number): void;
    private beforeUpload;
    private upload2D;
    private upload3D;
    private performUpload;
    uploadFloat(data: Float32Array, format?: PixelFormat): void;
    uploadInt(data: Int32Array, format?: PixelFormat): void;
    uploadUnsignedInt(data: Uint32Array, format?: PixelFormat): void;
    uploadShort(data: Int16Array, format?: PixelFormat): void;
    uploadUnsignedShort(data: Uint16Array, format?: PixelFormat): void;
    uploadByte(data: Int8Array, format?: PixelFormat): void;
    uploadUnsignedByte(data: Uint8Array, format?: PixelFormat): void;
}
